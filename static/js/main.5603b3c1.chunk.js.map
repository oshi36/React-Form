{"version":3,"sources":["images/image.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","height","paper","margin","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","marginTop","submit","padding","App","useState","currentResult","setCurrentResult","clear","setClear","useEffect","document","querySelector","value","classes","Grid","container","component","className","CssBaseline","item","xs","sm","md","src","Image","alt","Paper","elevation","square","Typography","variant","Avatar","noValidate","TextField","type","required","fullWidth","id","label","name","readOnly","Button","onClick","e","preventDefault","currentNum","result","parseInt","toFixed","halfWidth","color","console","log","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5603b3c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.082d5a9e.jpg\";","import React, {useState,useEffect} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Image from './images/image.jpg';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n    paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    padding:theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function App() {\n  const [currentResult,setCurrentResult]=useState(\"\");\n  const [clear,setClear]=useState(false);\n\n  useEffect(()=>{\n    document.querySelector('#result').value=\"\";\n  },[])\n  \n  useEffect(()=>{\n    if(clear)\n    document.querySelector('#result').value=\"\";\n  })\n\n  const Submit=(e)=>{\n    e.preventDefault();\n    if(clear) setClear(false);\n    let currentNum=document.querySelector('#num').value\n    if(currentNum=='')\n    return;\n    let result= (1/parseInt(currentNum)).toFixed(3);\n    setCurrentResult(result);\n    document.querySelector('#num').value=\"\";\n      \n  }\n\n  const Clear=(e)=>{\n    e.preventDefault();\n    console.log('Result:', currentResult);\n    document.querySelector('form').reset();\n    setClear(true);\n    setCurrentResult(0);\n  }\n\n\n  const classes = useStyles();\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7}>  \n      <div className=\"card\" >\n      <img src={Image} className=\"image\" alt=\"Oshi Gupta Image\"  />\n      <div className=\"card-body\">\n          <p className=\"card-text\">\n      <strong className=\"details\">Oshi Gupta</strong>\n      <br />\n      <strong className=\"details\">2018BTCS054</strong>\n              <br />\n          </p>\n      </div>\n      </div> \n      </Grid>\n      \n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n            Multiplicative Inverse\n          </Typography>\n       \n          <Avatar className={classes.avatar}>\n            <AssignmentRoundedIcon />\n          </Avatar>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              type=\"text\"\n              required\n              fullWidth\n              id=\"num\"\n              label=\"Enter a number\"\n              name=\"num\"\n              \n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              readOnly\n              type=\"text\"\n              fullWidth\n              name=\"result\"\n              label=\"Result\"\n              id=\"result\"\n              value={currentResult}\n              \n            />\n            <Button id=\"btn1\"\n            onClick={Submit}\n              type=\"submit\"\n              halfWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              See The Answer\n            </Button> \n            \n            <Button id=\"btn2\"\n            onClick={Clear}\n              type=\"submit\"\n              halfWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              >\n              Clear\n            </Button>\n          \n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}